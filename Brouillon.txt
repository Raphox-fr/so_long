	printf("------------------\n Voici la string :\n%s\n------------------", string);

	```c




game->moves = game->moves + 1;
	NAME			=	so_long

SRCS			=	display.c parsing_args.c init_mlx.c check_maps.c split.c so_long.c get_next_line/get_next_line.c get_next_line/get_next_line_utils.c init_map.c \

OBJS			=	${SRCS:.c=.o}

MLX_FLAGS		=	-lm -lmlx -lXext -lX11

CC				=	cc

# CFLAGS			=	-Wall -Werror -Wextra -g3

all				:	${NAME}

$(NAME): $(OBJS)
	cc $(OBJS) mlx/libmlx.a mlx/libmlx_Linux.a -L. -lXext -L. -lX11 -o $(NAME)

clean			:
					rm -rf ${OBJS}

fclean			:	clean
					rm -rf ${NAME}

re				:	fclean all

.PHONY			:	all clean fclean re

	// for(int i = 0;  game->map_to_fill[i]; i++)
	// 	printf("map[%d]: %s\n", i,  game->map_to_fill[i]);
	// printf("curent.x : %d |  current.y : %d\n", cur.x, cur.y);
	// printf("\n ----------------- \n");
	
		// printf("curent.x : %d |  current.y : %d\n", cur.x, cur.y);
	// printf("size.x : %d |  size.y : %d\n", size.x, size.y);



		// for(int i = 0; game->map[i]; i++)
	// 	printf("game_map[%d]: %s\n", i, game->map[i]);


		// printf("game->collectible: %d\n", game->collectibles_found);
	// printf("game->exit_found: %d\n", game->exit_found);




// int check_no_coquin(t_struct *game, char *str)
// {
// 	int x;
// 	int y;

// 	x = 0;
// 	y = 0;
// 	int count;
// 	count = 0;

// 	while (str[x] != '\n')
// 		x++;
// 	while (str[y] != '\0')
// 	{
// 		y++;
// 		if (count > x)
// 			ft_light_close(game);
// 		else if ((str[y] == '\n' ||  str[y + 1] != '\0' ) && count == x)
// 			count = 1;
// 		count++;
// 	}
// 	return (0);
// }




int check_double_jump(t_struct *game, char *str)
{
	int i;

	i = 0;

	while (str[i])
	{
		if (str[i] == '\n' && str[i + 1] == '\n')
		{
			printf("zub");
			ft_light_close(game);
		}
		i++;
	}
	return (1);
}